name: Java CI with Gradle

on:
  push:
    branches: 
      - develop
  pull_request:
    branches: 
      - develop

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: 🍃 JDK 17로 설정합니다.
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🍃 application.yml 파일을 생성합니다.
      run: |
        cd ./src/main
        cd ./resources
        touch ./application.yml
        echo "$APPLICATION" > ./application.yml
      env:
        APPLICATION: ${{ secrets.APPLICATION_YML }}

    - name: 🍃 gradle build를 위한 권한을 부여합니다.
      run: chmod +x gradlew

    - name: 🍃 gradle build 중입니다.
      run: ./gradlew build -x test

    - name: 🍃 docker image build 후 docker hub에 push합니다.
      run: |
        docker logout
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest-dev .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest-dev

    - name: 🍃 deploy.sh 파일을 EC2 server로 전달합니다.
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.KEY }}
        port: 22
        source: "./scripts/deploy.sh"
        target: "/home/ubuntu/"

    - name: 🍃 docker-compose.yml 파일을 EC2 server로 전달합니다.
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.KEY }}
        port: 22
        source: "./docker-compose.yml"
        target: "/home/ubuntu/"
        
    - name: 🍃 docker hub에서 pull 후 deploy합니다.
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.KEY }}
        port: 22
        script: |
           sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest-dev          
           cd scripts
           chmod 777 ./deploy.sh
           ./deploy.sh
           docker image prune -f
